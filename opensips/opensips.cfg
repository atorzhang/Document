####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0
children=4
auto_aliases=no

advertised_address="192.168.137.130"  # CUSTOMIZE ME ,IP地址配置
alias="192.168.137.130"				# CUSTOMIZE ME ,IP地址配置
listen=udp:eth0:5060     # CUSTOMIZE ME ,端口配置

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### rest_client module
loadmodule "rest_client.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### MYSQL module
loadmodule "db_mysql.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   2)
modparam("usrloc", "db_url",
	"mysql://opensips:opensipsrw_2021@192.168.137.130:3306/opensips") # CUSTOMIZE ME ,数据库连接字符串配置，格式(mysql://用户名:密码@ip:端口/数据库名)

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
modparam("acc", "detect_direction", 0)
modparam("acc", "db_url",
	"mysql://opensips:opensipsrw_2021@192.168.137.130:3306/opensips") # CUSTOMIZE ME ,数据库连接字符串配置

modparam("acc", "extra_fields", "db: a->from_uri; b->to_uri")

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db|uri", "db_url",
	"mysql://opensips:opensipsrw_2021@192.168.137.130:3306/opensips") # CUSTOMIZE ME ,数据库连接字符串配置
modparam("auth_db", "load_credentials", "")

#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout，单次会话最长时间6小时
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url",
	"mysql://opensips:opensipsrw_2021@192.168.137.130:3306/opensips") # CUSTOMIZE ME ,数据库连接字符串配置

loadmodule "proto_udp.so"
loadmodule "proto_tcp.so" 
####### Routing Logic ########

# main request routing logic

route{
	$var(url) = "http://192.168.0.137:8000";  # CUSTOMIZE ME ,接口地址配置
	if (!mf_process_maxfwd_header("10")) {
		send_reply("483","Too Many Hops");
		exit;
	}

	if (has_totag()) {

		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# sequential request within a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply("404","Not here");
			exit;
		}

		# validate the sequential request against dialog
		if ( $DLG_status!=NULL && !validate_dialog() ) {
			xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
			## exit;
		}

		if (is_method("BYE")) {
			# do accounting even if the transaction fails

			# CUSTOMIZE ME ,事件调用接口配置,BYE
			$var(rcpost) = rest_post("$var(url)/FJRH.Campus/IPPhoneNotice", "{\"Method\":\"BYE\",\"From\":\"$fU\",\"To\":\"$tU\",\"CallId\":\"$ci\"}", "application/json; charset=utf-8", "$var(body)", "$var(ct)", "$var(rcode)") ;
			
			# 插入源和目标地址
			$acc_extra(a) = $fu;
            $acc_extra(b) = $tu;
			do_accounting("db","cdr");
		}

		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(relay);
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {

		# CUSTOMIZE ME ,事件调用接口配置,CANCEL
		$var(rcpost) = rest_post("$var(url)/FJRH.Campus/IPPhoneNotice", "{\"Method\":\"CANCEL\",\"From\":\"$fU\",\"To\":\"$tU\",\"CallId\":\"$ci\"}", "application/json; charset=utf-8", "$var(body)", "$var(ct)", "$var(rcode)") ;

		if (t_check_trans())
			t_relay();

		exit;
	}

	# absorb retransmissions, but do not create transaction
	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {
		
		if (is_myself("$fd")) {
					
			# authenticate if from local subscriber
			# authenticate all initial non-REGISTER request that pretend to be
			# generated by local subscriber (domain from FROM URI is local)
			if (!proxy_authorize("", "subscriber")) {
				proxy_challenge("", "0");
				exit;
			}
			if (!db_check_from()) {
				send_reply("403","Forbidden auth ID");
				exit;
			}

			consume_credentials();
			# caller authenticated
			
		} else {
			# if caller is not local, then called number must be local
			
			if (!is_myself("$rd")) {
				send_reply("403","Relay Forbidden");
				exit;
			}
		}

	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
			"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	# account only INVITEs
	if (is_method("INVITE")) {
		
		# create dialog with timeout
		if ( !create_dialog("B") ) {
			send_reply("500","Internal Server Error");
			exit;
		}
		
		xlog("Method INVITE: $ru\n");

		# CUSTOMIZE ME ,事件调用接口配置,INVITE
		# 调用http get服务
		# $var(rc) = rest_get("http://192.168.0.137:8000/opensips/invite?fu=$fU&tu=$tU", "$var(credit)", "$var(ct)", "$var(rcode)");

		$var(rcpost) = rest_post("$var(url)/FJRH.Campus/IPPhoneNotice", "{\"Method\":\"INVITE\",\"From\":\"$fU\",\"To\":\"$tU\",\"CallId\":\"$ci\"}", "application/json; charset=utf-8", "$var(body)", "$var(ct)", "$var(rcode)") ;


		# 插入源和目标地址
		$acc_extra(a) = $fu;
        $acc_extra(b) = $tu;
		do_accounting("db");
		
	}

	
	if (!is_myself("$rd")) {
		append_hf("P-hint: outbound\r\n"); 
		
		route(relay);
	}

	# requests for my domain
	
	if (is_method("PUBLISH|SUBSCRIBE")) {
		send_reply("503", "Service Unavailable");
		exit;
	}

	if (is_method("REGISTER")) {
		# authenticate the REGISTER requests
		if (!www_authorize("", "subscriber")) {
			www_challenge("", "0");
			exit;
		}
		
		if (!db_check_to()) {
			send_reply("403","Forbidden auth ID");
			exit;
		}
		if ($proto == "tcp")
			setflag(TCP_PERSISTENT);
		
		if (!save("location"))
			sl_reply_error();

		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply("484","Address Incomplete");
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location","m")) {
		if (!db_does_uri_exist()) {
			send_reply("420","Bad Extension");
			exit;
		}
		
		t_reply("404", "Not Found");
		exit;
	} 

	# when routing via usrloc, log the missed calls also

	# 插入源和目标地址
	$acc_extra(a) = $fu;
    $acc_extra(b) = $tu;
	do_accounting("db","missed");

	route(relay);
}


route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	# ACK processing
	if (is_method("ACK")) {
		# CUSTOMIZE ME ,事件调用接口配置,ACK
		# 调用http get服务
		$var(rcpost) = rest_post("$var(url)/FJRH.Campus/IPPhoneNotice", "{\"Method\":\"ACK\",\"From\":\"$fU\",\"To\":\"$tU\",\"CallId\":\"$ci\"}", "application/json; charset=utf-8", "$var(body)", "$var(ct)", "$var(rcode)") ;

	}
	
	if (!t_relay()) {
		send_reply("500","Internal Error");
	}
	exit;
}

branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}

onreply_route[handle_nat] {
	
	xlog("incoming reply\n");
}

failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}
}

local_route {
	if (is_method("BYE") && $DLG_dir=="UPSTREAM") {
		
		acc_db_request("200 Dialog Timeout", "acc");
		
	}
}
